# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Stolen from https://github.com/greenmoss/home/blob/master/.bashrc
export EDITOR=vim
export VISUAL=$EDITOR
export PAGER=less
export HISTIGNORE="&:ls:[bf]g:exit:[ \t]*"
HISTSIZE=50000000
HISTFILESIZE=500000000
HISTCONTROL=ignoredups

# ensure multi-line commands stay as a single history command
shopt -s cmdhist
# do not string together multi-line commands with semi-colons in history
shopt -s lithist
shopt -s histverify
# append bash history
shopt -s histappend
# expand aliases for non-login shell
shopt -s expand_aliases


# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi
if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias lt='ls -alt'
alias lth='ls -alt|head'


# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi


# Git command completion
source $HOME/git-completion.bash

# Prompt shows state of Git, when in repository directories
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
if [ "$PS1" ]; then
  if [ "$BASH" ]; then
    if [ -f /etc/bash.bashrc ]; then
        . /etc/bash.bashrc
    fi
    if [ "`id -u`" -eq 0 ]; then
       PS1='\[\033[01;31m\]\h \[\033[01;34m\]\W \$ \[\033[00m\]'
    else
       PS1='$(__git_ps1 "(%s) ")\[\033[01;32m\]\u@\h \[\033[01;34m\]\w \$ \[\033[00m\]'
    fi
  fi
fi



# Show size of each subdir
alias ducks='du -cks *|sort -rn|head -11'


# to print the version of any Perl module specified
function pmver () { perl -M$1 -le "print $1->VERSION"; }

# Lists modules specified author has starred on metacpan. Specify author id. Requires Mojolicious. From https://gist.github.com/4030168
cpan_favorites() {
  perl -Mojo -E "g('https://metacpan.org/author/$1')->dom('td.release a')->pluck('text')->each(sub{s/-/::/g;say})"
}

# to flush memcached
alias flush_memcache="echo flush_all | nc localhost 11211"



### handy for Perl CPAN developers

# for Perl module module development
alias distbuild='./Build distclean; export RELEASE_TESTING=1 && perl Build.PL && ./Build && ./Build distcheck ./Build test && ./Build disttest && ./Build distclean && export RELEASE_TESTING=0'

# Run the tests we only care about when building a release
alias run_dist_tests='export RELEASE_TESTING=1 && prove -r -v -I lib -I ~/. xt/ && export RELEASE_TESTING=0'

# Easy way to run all tests on the Perl CPAN modules I am developing, that require a config file in my home dir. 
alias run_tests='prove -r -I lib -I ~/. t/'

# Determine test coverage with Devel::Cover, for Perl modules I am developing
alias test_coverage_remove_taint='export HARNESS_PERL_SWITCHES="-MDevel::Cover=+ignore,\\.t$" && remove_taint && run_tests && cover -report html_basic && export HARNESS_PERL_SWITCHES="" && add_taint'
alias test_coverage='export HARNESS_PERL_SWITCHES="-MDevel::Cover=+ignore,\\.t$" && run_tests && cover -report html_basic && export HARNESS_PERL_SWITCHES="" '

# Temporarily strip "-T" from Perl shebang line so Devel::Cover will work. 
# use "git reset --hard HEAD" to get back to orig state, but only if you have no other changes!
#alias remove_taint="find . -path '*/.git' -prune -o -path '*/data'  -prune -o -type f -exec perl -pi -0777 -e 's/perl -T/perl/sg' {} \;"
alias remove_taint="sed -i 's/perl -T/perl/' t/*"
alias add_taint="sed -i 's/\!perl/\!perl -T/' t/*"

### END handy for Perl CPAN developers


alias find_large_files="find . -size +5000000c 2>/dev/null -exec ls -l {} \;"


# Use vim as a pager, with syntax highlighting
alias vless='vim -u /usr/share/vim/vim80/macros/less.vim'


# Retrieve IP address data/assigned netblocks for the specified ip address 
alias arin='whois -h whois.arin.net $1'
