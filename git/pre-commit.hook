#!/usr/bin/env bash

echo "+++ PRE-COMMIT HOOK Starting! +++"

# Adapted from https://gist.github.com/nilsding/b6105a8949955ce81f82dabc37650640
# Print a message
#
# Params:
#   $1: colour (red | green | yellow)
#   $*: status to print
#
# Example usage:
#   print_msg green "Successfully built $something"
#
#   print_msg red "An error occurred:" $msg
print_msg() {
  color="1"
  case $1 in
    red)    color="31;1" ;;
    green)  color="32;1" ;;
    yellow) color="33;1" ;;
  esac
  shift
  # shellcheck disable=SC1117
  sleep 1 
  printf " \033[${color}m*\033[0;1m %s\033[0m\n" "$*"
}

# Require an application to be in $PATH.
#
# Params:
#   $1: app name
#
# Example usage:
#   require_app ruby
require_app() {
  if ! command -v "$1" > /dev/null; then
    print_msg red "$1 not found, please install it"
    return 1
  fi
}

###############################################################################

require_app shellcheck || exit 0

# JP: my git hooks will end in .hook and they are shell scripts
changed_shell_files=$(
  git diff --cached --name-only --diff-filter=ACM |
  xargs grep -lE '^#!/*(sh|bash|ksh|hook)'
)

if [[ -z $changed_shell_files ]]; then
    echo "  No changed shell files. Skipping shellcheck"
    echo "+++ PRE-COMMIT HOOK Complete +++"
    exit 0
fi

print_msg yellow "Running shellcheck..."
# shellcheck disable=SC2086
if shellcheck -a $changed_shell_files; then
  print_msg green "shellcheck approved!"
  echo "+++ PRE-COMMIT HOOK Complete +++"
else
  print_msg red "shellcheck is sadface! (return code: $?), "\
                "fix the errors and come back later"
  exit 1
fi
