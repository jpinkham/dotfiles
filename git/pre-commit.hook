#!/bin/sh
#
# this is from sample hook
if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi


# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

# copied from https://gist.github.com/nilsding/b6105a8949955ce81f82dabc37650640
# Print a message
#
# Params:
#   $1: colour (red | green | yellow)
#   $*: status to print
#
# Example usage:
#   print_msg green "Successfully built $something"
#
#   print_msg red "An error occurred:" $msg
print_msg() {
  color="1"
  case $1 in
    red)    color="31;1" ;;
    green)  color="32;1" ;;
    yellow) color="33;1" ;;
  esac
  shift
  # shellcheck disable=SC1117
  printf " \033[${color}m*\033[0;1m %s\033[0m\n" "$*"
}

# Require an application to be in $PATH.
#
# Params:
#   $1: app name
#
# Example usage:
#   require_app ruby
require_app() {
  if ! command -v "$1" > /dev/null; then
    print_msg red "$1 not found, please install it"
    return 1
  fi
}

###############################################################################

require_app shellcheck || exit 0

changed_shell_files=$(
  git diff --cached --name-only --diff-filter=ACM |
  xargs grep -lE '^#!/.*(sh|bash|ksh)'
)

print_msg yellow "Running shellcheck..."
# shellcheck disable=SC2086
if shellcheck -a $changed_shell_files; then
  print_msg green "shellcheck approved!"
else
  print_msg red "shellcheck is sadface! (return code: $?), "\
                "fix the errors and come back later"
  exit 1
fi
